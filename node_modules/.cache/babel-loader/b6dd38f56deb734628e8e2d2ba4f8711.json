{"ast":null,"code":"'use strict';\n\nlet Declaration = require('./declaration');\nlet tokenizer = require('./tokenize');\nlet Comment = require('./comment');\nlet AtRule = require('./at-rule');\nlet Root = require('./root');\nlet Rule = require('./rule');\nclass Parser {\n  constructor(input) {\n    this.input = input;\n    this.root = new Root();\n    this.current = this.root;\n    this.spaces = '';\n    this.semicolon = false;\n    this.customProperty = false;\n    this.createTokenizer();\n    this.root.source = {\n      input,\n      start: {\n        offset: 0,\n        line: 1,\n        column: 1\n      }\n    };\n  }\n  createTokenizer() {\n    this.tokenizer = tokenizer(this.input);\n  }\n  parse() {\n    let token;\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken();\n      switch (token[0]) {\n        case 'space':\n          this.spaces += token[1];\n          break;\n        case ';':\n          this.freeSemicolon(token);\n          break;\n        case '}':\n          this.end(token);\n          break;\n        case 'comment':\n          this.comment(token);\n          break;\n        case 'at-word':\n          this.atrule(token);\n          break;\n        case '{':\n          this.emptyRule(token);\n          break;\n        default:\n          this.other(token);\n          break;\n      }\n    }\n    this.endFile();\n  }\n  comment(token) {\n    let node = new Comment();\n    this.init(node, token[2]);\n    node.source.end = this.getPosition(token[3] || token[2]);\n    let text = token[1].slice(2, -2);\n    if (/^\\s*$/.test(text)) {\n      node.text = '';\n      node.raws.left = text;\n      node.raws.right = '';\n    } else {\n      let match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/);\n      node.text = match[2];\n      node.raws.left = match[1];\n      node.raws.right = match[3];\n    }\n  }\n  emptyRule(token) {\n    let node = new Rule();\n    this.init(node, token[2]);\n    node.selector = '';\n    node.raws.between = '';\n    this.current = node;\n  }\n  other(start) {\n    let end = false;\n    let type = null;\n    let colon = false;\n    let bracket = null;\n    let brackets = [];\n    let customProperty = start[1].startsWith('--');\n    let tokens = [];\n    let token = start;\n    while (token) {\n      type = token[0];\n      tokens.push(token);\n      if (type === '(' || type === '[') {\n        if (!bracket) bracket = token;\n        brackets.push(type === '(' ? ')' : ']');\n      } else if (customProperty && colon && type === '{') {\n        if (!bracket) bracket = token;\n        brackets.push('}');\n      } else if (brackets.length === 0) {\n        if (type === ';') {\n          if (colon) {\n            this.decl(tokens, customProperty);\n            return;\n          } else {\n            break;\n          }\n        } else if (type === '{') {\n          this.rule(tokens);\n          return;\n        } else if (type === '}') {\n          this.tokenizer.back(tokens.pop());\n          end = true;\n          break;\n        } else if (type === ':') {\n          colon = true;\n        }\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop();\n        if (brackets.length === 0) bracket = null;\n      }\n      token = this.tokenizer.nextToken();\n    }\n    if (this.tokenizer.endOfFile()) end = true;\n    if (brackets.length > 0) this.unclosedBracket(bracket);\n    if (end && colon) {\n      while (tokens.length) {\n        token = tokens[tokens.length - 1][0];\n        if (token !== 'space' && token !== 'comment') break;\n        this.tokenizer.back(tokens.pop());\n      }\n      this.decl(tokens, customProperty);\n    } else {\n      this.unknownWord(tokens);\n    }\n  }\n  rule(tokens) {\n    tokens.pop();\n    let node = new Rule();\n    this.init(node, tokens[0][2]);\n    node.raws.between = this.spacesAndCommentsFromEnd(tokens);\n    this.raw(node, 'selector', tokens);\n    this.current = node;\n  }\n  decl(tokens, customProperty) {\n    let node = new Declaration();\n    this.init(node, tokens[0][2]);\n    let last = tokens[tokens.length - 1];\n    if (last[0] === ';') {\n      this.semicolon = true;\n      tokens.pop();\n    }\n    node.source.end = this.getPosition(last[3] || last[2]);\n    while (tokens[0][0] !== 'word') {\n      if (tokens.length === 1) this.unknownWord(tokens);\n      node.raws.before += tokens.shift()[1];\n    }\n    node.source.start = this.getPosition(tokens[0][2]);\n    node.prop = '';\n    while (tokens.length) {\n      let type = tokens[0][0];\n      if (type === ':' || type === 'space' || type === 'comment') {\n        break;\n      }\n      node.prop += tokens.shift()[1];\n    }\n    node.raws.between = '';\n    let token;\n    while (tokens.length) {\n      token = tokens.shift();\n      if (token[0] === ':') {\n        node.raws.between += token[1];\n        break;\n      } else {\n        if (token[0] === 'word' && /\\w/.test(token[1])) {\n          this.unknownWord([token]);\n        }\n        node.raws.between += token[1];\n      }\n    }\n    if (node.prop[0] === '_' || node.prop[0] === '*') {\n      node.raws.before += node.prop[0];\n      node.prop = node.prop.slice(1);\n    }\n    let firstSpaces = this.spacesAndCommentsFromStart(tokens);\n    this.precheckMissedSemicolon(tokens);\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      token = tokens[i];\n      if (token[1].toLowerCase() === '!important') {\n        node.important = true;\n        let string = this.stringFrom(tokens, i);\n        string = this.spacesFromEnd(tokens) + string;\n        if (string !== ' !important') node.raws.important = string;\n        break;\n      } else if (token[1].toLowerCase() === 'important') {\n        let cache = tokens.slice(0);\n        let str = '';\n        for (let j = i; j > 0; j--) {\n          let type = cache[j][0];\n          if (str.trim().indexOf('!') === 0 && type !== 'space') {\n            break;\n          }\n          str = cache.pop()[1] + str;\n        }\n        if (str.trim().indexOf('!') === 0) {\n          node.important = true;\n          node.raws.important = str;\n          tokens = cache;\n        }\n      }\n      if (token[0] !== 'space' && token[0] !== 'comment') {\n        break;\n      }\n    }\n    let hasWord = tokens.some(i => i[0] !== 'space' && i[0] !== 'comment');\n    this.raw(node, 'value', tokens);\n    if (hasWord) {\n      node.raws.between += firstSpaces;\n    } else {\n      node.value = firstSpaces + node.value;\n    }\n    if (node.value.includes(':') && !customProperty) {\n      this.checkMissedSemicolon(tokens);\n    }\n  }\n  atrule(token) {\n    let node = new AtRule();\n    node.name = token[1].slice(1);\n    if (node.name === '') {\n      this.unnamedAtrule(node, token);\n    }\n    this.init(node, token[2]);\n    let type;\n    let prev;\n    let shift;\n    let last = false;\n    let open = false;\n    let params = [];\n    let brackets = [];\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken();\n      type = token[0];\n      if (type === '(' || type === '[') {\n        brackets.push(type === '(' ? ')' : ']');\n      } else if (type === '{' && brackets.length > 0) {\n        brackets.push('}');\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop();\n      }\n      if (brackets.length === 0) {\n        if (type === ';') {\n          node.source.end = this.getPosition(token[2]);\n          this.semicolon = true;\n          break;\n        } else if (type === '{') {\n          open = true;\n          break;\n        } else if (type === '}') {\n          if (params.length > 0) {\n            shift = params.length - 1;\n            prev = params[shift];\n            while (prev && prev[0] === 'space') {\n              prev = params[--shift];\n            }\n            if (prev) {\n              node.source.end = this.getPosition(prev[3] || prev[2]);\n            }\n          }\n          this.end(token);\n          break;\n        } else {\n          params.push(token);\n        }\n      } else {\n        params.push(token);\n      }\n      if (this.tokenizer.endOfFile()) {\n        last = true;\n        break;\n      }\n    }\n    node.raws.between = this.spacesAndCommentsFromEnd(params);\n    if (params.length) {\n      node.raws.afterName = this.spacesAndCommentsFromStart(params);\n      this.raw(node, 'params', params);\n      if (last) {\n        token = params[params.length - 1];\n        node.source.end = this.getPosition(token[3] || token[2]);\n        this.spaces = node.raws.between;\n        node.raws.between = '';\n      }\n    } else {\n      node.raws.afterName = '';\n      node.params = '';\n    }\n    if (open) {\n      node.nodes = [];\n      this.current = node;\n    }\n  }\n  end(token) {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon;\n    }\n    this.semicolon = false;\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces;\n    this.spaces = '';\n    if (this.current.parent) {\n      this.current.source.end = this.getPosition(token[2]);\n      this.current = this.current.parent;\n    } else {\n      this.unexpectedClose(token);\n    }\n  }\n  endFile() {\n    if (this.current.parent) this.unclosedBlock();\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon;\n    }\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces;\n  }\n  freeSemicolon(token) {\n    this.spaces += token[1];\n    if (this.current.nodes) {\n      let prev = this.current.nodes[this.current.nodes.length - 1];\n      if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {\n        prev.raws.ownSemicolon = this.spaces;\n        this.spaces = '';\n      }\n    }\n  }\n\n  // Helpers\n\n  getPosition(offset) {\n    let pos = this.input.fromOffset(offset);\n    return {\n      offset,\n      line: pos.line,\n      column: pos.col\n    };\n  }\n  init(node, offset) {\n    this.current.push(node);\n    node.source = {\n      start: this.getPosition(offset),\n      input: this.input\n    };\n    node.raws.before = this.spaces;\n    this.spaces = '';\n    if (node.type !== 'comment') this.semicolon = false;\n  }\n  raw(node, prop, tokens) {\n    let token, type;\n    let length = tokens.length;\n    let value = '';\n    let clean = true;\n    let next, prev;\n    let pattern = /^([#.|])?(\\w)+/i;\n    for (let i = 0; i < length; i += 1) {\n      token = tokens[i];\n      type = token[0];\n      if (type === 'comment' && node.type === 'rule') {\n        prev = tokens[i - 1];\n        next = tokens[i + 1];\n        if (prev[0] !== 'space' && next[0] !== 'space' && pattern.test(prev[1]) && pattern.test(next[1])) {\n          value += token[1];\n        } else {\n          clean = false;\n        }\n        continue;\n      }\n      if (type === 'comment' || type === 'space' && i === length - 1) {\n        clean = false;\n      } else {\n        value += token[1];\n      }\n    }\n    if (!clean) {\n      let raw = tokens.reduce((all, i) => all + i[1], '');\n      node.raws[prop] = {\n        value,\n        raw\n      };\n    }\n    node[prop] = value;\n  }\n  spacesAndCommentsFromEnd(tokens) {\n    let lastTokenType;\n    let spaces = '';\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0];\n      if (lastTokenType !== 'space' && lastTokenType !== 'comment') break;\n      spaces = tokens.pop()[1] + spaces;\n    }\n    return spaces;\n  }\n  spacesAndCommentsFromStart(tokens) {\n    let next;\n    let spaces = '';\n    while (tokens.length) {\n      next = tokens[0][0];\n      if (next !== 'space' && next !== 'comment') break;\n      spaces += tokens.shift()[1];\n    }\n    return spaces;\n  }\n  spacesFromEnd(tokens) {\n    let lastTokenType;\n    let spaces = '';\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0];\n      if (lastTokenType !== 'space') break;\n      spaces = tokens.pop()[1] + spaces;\n    }\n    return spaces;\n  }\n  stringFrom(tokens, from) {\n    let result = '';\n    for (let i = from; i < tokens.length; i++) {\n      result += tokens[i][1];\n    }\n    tokens.splice(from, tokens.length - from);\n    return result;\n  }\n  colon(tokens) {\n    let brackets = 0;\n    let token, type, prev;\n    for (let [i, element] of tokens.entries()) {\n      token = element;\n      type = token[0];\n      if (type === '(') {\n        brackets += 1;\n      }\n      if (type === ')') {\n        brackets -= 1;\n      }\n      if (brackets === 0 && type === ':') {\n        if (!prev) {\n          this.doubleColon(token);\n        } else if (prev[0] === 'word' && prev[1] === 'progid') {\n          continue;\n        } else {\n          return i;\n        }\n      }\n      prev = token;\n    }\n    return false;\n  }\n\n  // Errors\n\n  unclosedBracket(bracket) {\n    throw this.input.error('Unclosed bracket', {\n      offset: bracket[2]\n    }, {\n      offset: bracket[2] + 1\n    });\n  }\n  unknownWord(tokens) {\n    throw this.input.error('Unknown word', {\n      offset: tokens[0][2]\n    }, {\n      offset: tokens[0][2] + tokens[0][1].length\n    });\n  }\n  unexpectedClose(token) {\n    throw this.input.error('Unexpected }', {\n      offset: token[2]\n    }, {\n      offset: token[2] + 1\n    });\n  }\n  unclosedBlock() {\n    let pos = this.current.source.start;\n    throw this.input.error('Unclosed block', pos.line, pos.column);\n  }\n  doubleColon(token) {\n    throw this.input.error('Double colon', {\n      offset: token[2]\n    }, {\n      offset: token[2] + token[1].length\n    });\n  }\n  unnamedAtrule(node, token) {\n    throw this.input.error('At-rule without name', {\n      offset: token[2]\n    }, {\n      offset: token[2] + token[1].length\n    });\n  }\n  precheckMissedSemicolon( /* tokens */\n  ) {\n    // Hook for Safe Parser\n  }\n  checkMissedSemicolon(tokens) {\n    let colon = this.colon(tokens);\n    if (colon === false) return;\n    let founded = 0;\n    let token;\n    for (let j = colon - 1; j >= 0; j--) {\n      token = tokens[j];\n      if (token[0] !== 'space') {\n        founded += 1;\n        if (founded === 2) break;\n      }\n    }\n    // If the token is a word, e.g. `!important`, `red` or any other valid property's value.\n    // Then we need to return the colon after that word token. [3] is the \"end\" colon of that word.\n    // And because we need it after that one we do +1 to get the next one.\n    throw this.input.error('Missed semicolon', token[0] === 'word' ? token[3] + 1 : token[2]);\n  }\n}\nmodule.exports = Parser;","map":{"version":3,"names":["Declaration","require","tokenizer","Comment","AtRule","Root","Rule","Parser","constructor","input","root","current","spaces","semicolon","customProperty","createTokenizer","source","start","offset","line","column","parse","token","endOfFile","nextToken","freeSemicolon","end","comment","atrule","emptyRule","other","endFile","node","init","getPosition","text","slice","test","raws","left","right","match","selector","between","type","colon","bracket","brackets","startsWith","tokens","push","length","decl","rule","back","pop","unclosedBracket","unknownWord","spacesAndCommentsFromEnd","raw","last","before","shift","prop","firstSpaces","spacesAndCommentsFromStart","precheckMissedSemicolon","i","toLowerCase","important","string","stringFrom","spacesFromEnd","cache","str","j","trim","indexOf","hasWord","some","value","includes","checkMissedSemicolon","name","unnamedAtrule","prev","open","params","afterName","nodes","after","parent","unexpectedClose","unclosedBlock","ownSemicolon","pos","fromOffset","col","clean","next","pattern","reduce","all","lastTokenType","from","result","splice","element","entries","doubleColon","error","founded","module","exports"],"sources":["D:/IT-incubator/HTML_CSS_fore_React/my_portfolio/GIT/node_modules/postcss/lib/parser.js"],"sourcesContent":["'use strict'\n\nlet Declaration = require('./declaration')\nlet tokenizer = require('./tokenize')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Root = require('./root')\nlet Rule = require('./rule')\n\nclass Parser {\n  constructor(input) {\n    this.input = input\n\n    this.root = new Root()\n    this.current = this.root\n    this.spaces = ''\n    this.semicolon = false\n    this.customProperty = false\n\n    this.createTokenizer()\n    this.root.source = { input, start: { offset: 0, line: 1, column: 1 } }\n  }\n\n  createTokenizer() {\n    this.tokenizer = tokenizer(this.input)\n  }\n\n  parse() {\n    let token\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n\n      switch (token[0]) {\n        case 'space':\n          this.spaces += token[1]\n          break\n\n        case ';':\n          this.freeSemicolon(token)\n          break\n\n        case '}':\n          this.end(token)\n          break\n\n        case 'comment':\n          this.comment(token)\n          break\n\n        case 'at-word':\n          this.atrule(token)\n          break\n\n        case '{':\n          this.emptyRule(token)\n          break\n\n        default:\n          this.other(token)\n          break\n      }\n    }\n    this.endFile()\n  }\n\n  comment(token) {\n    let node = new Comment()\n    this.init(node, token[2])\n    node.source.end = this.getPosition(token[3] || token[2])\n\n    let text = token[1].slice(2, -2)\n    if (/^\\s*$/.test(text)) {\n      node.text = ''\n      node.raws.left = text\n      node.raws.right = ''\n    } else {\n      let match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/)\n      node.text = match[2]\n      node.raws.left = match[1]\n      node.raws.right = match[3]\n    }\n  }\n\n  emptyRule(token) {\n    let node = new Rule()\n    this.init(node, token[2])\n    node.selector = ''\n    node.raws.between = ''\n    this.current = node\n  }\n\n  other(start) {\n    let end = false\n    let type = null\n    let colon = false\n    let bracket = null\n    let brackets = []\n    let customProperty = start[1].startsWith('--')\n\n    let tokens = []\n    let token = start\n    while (token) {\n      type = token[0]\n      tokens.push(token)\n\n      if (type === '(' || type === '[') {\n        if (!bracket) bracket = token\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (customProperty && colon && type === '{') {\n        if (!bracket) bracket = token\n        brackets.push('}')\n      } else if (brackets.length === 0) {\n        if (type === ';') {\n          if (colon) {\n            this.decl(tokens, customProperty)\n            return\n          } else {\n            break\n          }\n        } else if (type === '{') {\n          this.rule(tokens)\n          return\n        } else if (type === '}') {\n          this.tokenizer.back(tokens.pop())\n          end = true\n          break\n        } else if (type === ':') {\n          colon = true\n        }\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n        if (brackets.length === 0) bracket = null\n      }\n\n      token = this.tokenizer.nextToken()\n    }\n\n    if (this.tokenizer.endOfFile()) end = true\n    if (brackets.length > 0) this.unclosedBracket(bracket)\n\n    if (end && colon) {\n      while (tokens.length) {\n        token = tokens[tokens.length - 1][0]\n        if (token !== 'space' && token !== 'comment') break\n        this.tokenizer.back(tokens.pop())\n      }\n      this.decl(tokens, customProperty)\n    } else {\n      this.unknownWord(tokens)\n    }\n  }\n\n  rule(tokens) {\n    tokens.pop()\n\n    let node = new Rule()\n    this.init(node, tokens[0][2])\n\n    node.raws.between = this.spacesAndCommentsFromEnd(tokens)\n    this.raw(node, 'selector', tokens)\n    this.current = node\n  }\n\n  decl(tokens, customProperty) {\n    let node = new Declaration()\n    this.init(node, tokens[0][2])\n\n    let last = tokens[tokens.length - 1]\n    if (last[0] === ';') {\n      this.semicolon = true\n      tokens.pop()\n    }\n    node.source.end = this.getPosition(last[3] || last[2])\n\n    while (tokens[0][0] !== 'word') {\n      if (tokens.length === 1) this.unknownWord(tokens)\n      node.raws.before += tokens.shift()[1]\n    }\n    node.source.start = this.getPosition(tokens[0][2])\n\n    node.prop = ''\n    while (tokens.length) {\n      let type = tokens[0][0]\n      if (type === ':' || type === 'space' || type === 'comment') {\n        break\n      }\n      node.prop += tokens.shift()[1]\n    }\n\n    node.raws.between = ''\n\n    let token\n    while (tokens.length) {\n      token = tokens.shift()\n\n      if (token[0] === ':') {\n        node.raws.between += token[1]\n        break\n      } else {\n        if (token[0] === 'word' && /\\w/.test(token[1])) {\n          this.unknownWord([token])\n        }\n        node.raws.between += token[1]\n      }\n    }\n\n    if (node.prop[0] === '_' || node.prop[0] === '*') {\n      node.raws.before += node.prop[0]\n      node.prop = node.prop.slice(1)\n    }\n    let firstSpaces = this.spacesAndCommentsFromStart(tokens)\n    this.precheckMissedSemicolon(tokens)\n\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      token = tokens[i]\n      if (token[1].toLowerCase() === '!important') {\n        node.important = true\n        let string = this.stringFrom(tokens, i)\n        string = this.spacesFromEnd(tokens) + string\n        if (string !== ' !important') node.raws.important = string\n        break\n      } else if (token[1].toLowerCase() === 'important') {\n        let cache = tokens.slice(0)\n        let str = ''\n        for (let j = i; j > 0; j--) {\n          let type = cache[j][0]\n          if (str.trim().indexOf('!') === 0 && type !== 'space') {\n            break\n          }\n          str = cache.pop()[1] + str\n        }\n        if (str.trim().indexOf('!') === 0) {\n          node.important = true\n          node.raws.important = str\n          tokens = cache\n        }\n      }\n\n      if (token[0] !== 'space' && token[0] !== 'comment') {\n        break\n      }\n    }\n\n    let hasWord = tokens.some(i => i[0] !== 'space' && i[0] !== 'comment')\n    this.raw(node, 'value', tokens)\n    if (hasWord) {\n      node.raws.between += firstSpaces\n    } else {\n      node.value = firstSpaces + node.value\n    }\n\n    if (node.value.includes(':') && !customProperty) {\n      this.checkMissedSemicolon(tokens)\n    }\n  }\n\n  atrule(token) {\n    let node = new AtRule()\n    node.name = token[1].slice(1)\n    if (node.name === '') {\n      this.unnamedAtrule(node, token)\n    }\n    this.init(node, token[2])\n\n    let type\n    let prev\n    let shift\n    let last = false\n    let open = false\n    let params = []\n    let brackets = []\n\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n      type = token[0]\n\n      if (type === '(' || type === '[') {\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (type === '{' && brackets.length > 0) {\n        brackets.push('}')\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n      }\n\n      if (brackets.length === 0) {\n        if (type === ';') {\n          node.source.end = this.getPosition(token[2])\n          this.semicolon = true\n          break\n        } else if (type === '{') {\n          open = true\n          break\n        } else if (type === '}') {\n          if (params.length > 0) {\n            shift = params.length - 1\n            prev = params[shift]\n            while (prev && prev[0] === 'space') {\n              prev = params[--shift]\n            }\n            if (prev) {\n              node.source.end = this.getPosition(prev[3] || prev[2])\n            }\n          }\n          this.end(token)\n          break\n        } else {\n          params.push(token)\n        }\n      } else {\n        params.push(token)\n      }\n\n      if (this.tokenizer.endOfFile()) {\n        last = true\n        break\n      }\n    }\n\n    node.raws.between = this.spacesAndCommentsFromEnd(params)\n    if (params.length) {\n      node.raws.afterName = this.spacesAndCommentsFromStart(params)\n      this.raw(node, 'params', params)\n      if (last) {\n        token = params[params.length - 1]\n        node.source.end = this.getPosition(token[3] || token[2])\n        this.spaces = node.raws.between\n        node.raws.between = ''\n      }\n    } else {\n      node.raws.afterName = ''\n      node.params = ''\n    }\n\n    if (open) {\n      node.nodes = []\n      this.current = node\n    }\n  }\n\n  end(token) {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.semicolon = false\n\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n    this.spaces = ''\n\n    if (this.current.parent) {\n      this.current.source.end = this.getPosition(token[2])\n      this.current = this.current.parent\n    } else {\n      this.unexpectedClose(token)\n    }\n  }\n\n  endFile() {\n    if (this.current.parent) this.unclosedBlock()\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n  }\n\n  freeSemicolon(token) {\n    this.spaces += token[1]\n    if (this.current.nodes) {\n      let prev = this.current.nodes[this.current.nodes.length - 1]\n      if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {\n        prev.raws.ownSemicolon = this.spaces\n        this.spaces = ''\n      }\n    }\n  }\n\n  // Helpers\n\n  getPosition(offset) {\n    let pos = this.input.fromOffset(offset)\n    return {\n      offset,\n      line: pos.line,\n      column: pos.col\n    }\n  }\n\n  init(node, offset) {\n    this.current.push(node)\n    node.source = {\n      start: this.getPosition(offset),\n      input: this.input\n    }\n    node.raws.before = this.spaces\n    this.spaces = ''\n    if (node.type !== 'comment') this.semicolon = false\n  }\n\n  raw(node, prop, tokens) {\n    let token, type\n    let length = tokens.length\n    let value = ''\n    let clean = true\n    let next, prev\n    let pattern = /^([#.|])?(\\w)+/i\n\n    for (let i = 0; i < length; i += 1) {\n      token = tokens[i]\n      type = token[0]\n\n      if (type === 'comment' && node.type === 'rule') {\n        prev = tokens[i - 1]\n        next = tokens[i + 1]\n\n        if (\n          prev[0] !== 'space' &&\n          next[0] !== 'space' &&\n          pattern.test(prev[1]) &&\n          pattern.test(next[1])\n        ) {\n          value += token[1]\n        } else {\n          clean = false\n        }\n\n        continue\n      }\n\n      if (type === 'comment' || (type === 'space' && i === length - 1)) {\n        clean = false\n      } else {\n        value += token[1]\n      }\n    }\n    if (!clean) {\n      let raw = tokens.reduce((all, i) => all + i[1], '')\n      node.raws[prop] = { value, raw }\n    }\n    node[prop] = value\n  }\n\n  spacesAndCommentsFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space' && lastTokenType !== 'comment') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  spacesAndCommentsFromStart(tokens) {\n    let next\n    let spaces = ''\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      spaces += tokens.shift()[1]\n    }\n    return spaces\n  }\n\n  spacesFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  stringFrom(tokens, from) {\n    let result = ''\n    for (let i = from; i < tokens.length; i++) {\n      result += tokens[i][1]\n    }\n    tokens.splice(from, tokens.length - from)\n    return result\n  }\n\n  colon(tokens) {\n    let brackets = 0\n    let token, type, prev\n    for (let [i, element] of tokens.entries()) {\n      token = element\n      type = token[0]\n\n      if (type === '(') {\n        brackets += 1\n      }\n      if (type === ')') {\n        brackets -= 1\n      }\n      if (brackets === 0 && type === ':') {\n        if (!prev) {\n          this.doubleColon(token)\n        } else if (prev[0] === 'word' && prev[1] === 'progid') {\n          continue\n        } else {\n          return i\n        }\n      }\n\n      prev = token\n    }\n    return false\n  }\n\n  // Errors\n\n  unclosedBracket(bracket) {\n    throw this.input.error(\n      'Unclosed bracket',\n      { offset: bracket[2] },\n      { offset: bracket[2] + 1 }\n    )\n  }\n\n  unknownWord(tokens) {\n    throw this.input.error(\n      'Unknown word',\n      { offset: tokens[0][2] },\n      { offset: tokens[0][2] + tokens[0][1].length }\n    )\n  }\n\n  unexpectedClose(token) {\n    throw this.input.error(\n      'Unexpected }',\n      { offset: token[2] },\n      { offset: token[2] + 1 }\n    )\n  }\n\n  unclosedBlock() {\n    let pos = this.current.source.start\n    throw this.input.error('Unclosed block', pos.line, pos.column)\n  }\n\n  doubleColon(token) {\n    throw this.input.error(\n      'Double colon',\n      { offset: token[2] },\n      { offset: token[2] + token[1].length }\n    )\n  }\n\n  unnamedAtrule(node, token) {\n    throw this.input.error(\n      'At-rule without name',\n      { offset: token[2] },\n      { offset: token[2] + token[1].length }\n    )\n  }\n\n  precheckMissedSemicolon(/* tokens */) {\n    // Hook for Safe Parser\n  }\n\n  checkMissedSemicolon(tokens) {\n    let colon = this.colon(tokens)\n    if (colon === false) return\n\n    let founded = 0\n    let token\n    for (let j = colon - 1; j >= 0; j--) {\n      token = tokens[j]\n      if (token[0] !== 'space') {\n        founded += 1\n        if (founded === 2) break\n      }\n    }\n    // If the token is a word, e.g. `!important`, `red` or any other valid property's value.\n    // Then we need to return the colon after that word token. [3] is the \"end\" colon of that word.\n    // And because we need it after that one we do +1 to get the next one.\n    throw this.input.error(\n      'Missed semicolon',\n      token[0] === 'word' ? token[3] + 1 : token[2]\n    )\n  }\n}\n\nmodule.exports = Parser\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}